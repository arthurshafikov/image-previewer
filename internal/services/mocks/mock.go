// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	image "image"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/thewolf27/image-previewer/internal/core"
)

// MockResizer is a mock of Resizer interface.
type MockResizer struct {
	ctrl     *gomock.Controller
	recorder *MockResizerMockRecorder
}

// MockResizerMockRecorder is the mock recorder for MockResizer.
type MockResizerMockRecorder struct {
	mock *MockResizer
}

// NewMockResizer creates a new mock instance.
func NewMockResizer(ctrl *gomock.Controller) *MockResizer {
	mock := &MockResizer{ctrl: ctrl}
	mock.recorder = &MockResizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResizer) EXPECT() *MockResizerMockRecorder {
	return m.recorder
}

// ResizeFromUrl mocks base method.
func (m *MockResizer) ResizeFromUrl(inp core.ResizeInput) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeFromUrl", inp)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeFromUrl indicates an expected call of ResizeFromUrl.
func (mr *MockResizerMockRecorder) ResizeFromUrl(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeFromUrl", reflect.TypeOf((*MockResizer)(nil).ResizeFromUrl), inp)
}

// MockImages is a mock of Images interface.
type MockImages struct {
	ctrl     *gomock.Controller
	recorder *MockImagesMockRecorder
}

// MockImagesMockRecorder is the mock recorder for MockImages.
type MockImagesMockRecorder struct {
	mock *MockImages
}

// NewMockImages creates a new mock instance.
func NewMockImages(ctrl *gomock.Controller) *MockImages {
	mock := &MockImages{ctrl: ctrl}
	mock.recorder = &MockImagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImages) EXPECT() *MockImagesMockRecorder {
	return m.recorder
}

// DownloadFromUrlAndSaveImageToStorage mocks base method.
func (m *MockImages) DownloadFromUrlAndSaveImageToStorage(inp core.DownloadImageInput) (*core.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFromUrlAndSaveImageToStorage", inp)
	ret0, _ := ret[0].(*core.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFromUrlAndSaveImageToStorage indicates an expected call of DownloadFromUrlAndSaveImageToStorage.
func (mr *MockImagesMockRecorder) DownloadFromUrlAndSaveImageToStorage(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFromUrlAndSaveImageToStorage", reflect.TypeOf((*MockImages)(nil).DownloadFromUrlAndSaveImageToStorage), inp)
}

// SaveResizedImageToStorage mocks base method.
func (m *MockImages) SaveResizedImageToStorage(imageName string, resizedImage image.Image) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResizedImageToStorage", imageName, resizedImage)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveResizedImageToStorage indicates an expected call of SaveResizedImageToStorage.
func (mr *MockImagesMockRecorder) SaveResizedImageToStorage(imageName, resizedImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResizedImageToStorage", reflect.TypeOf((*MockImages)(nil).SaveResizedImageToStorage), imageName, resizedImage)
}

// MockImageCache is a mock of ImageCache interface.
type MockImageCache struct {
	ctrl     *gomock.Controller
	recorder *MockImageCacheMockRecorder
}

// MockImageCacheMockRecorder is the mock recorder for MockImageCache.
type MockImageCacheMockRecorder struct {
	mock *MockImageCache
}

// NewMockImageCache creates a new mock instance.
func NewMockImageCache(ctrl *gomock.Controller) *MockImageCache {
	mock := &MockImageCache{ctrl: ctrl}
	mock.recorder = &MockImageCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageCache) EXPECT() *MockImageCacheMockRecorder {
	return m.recorder
}

// GetCachedImagesFolder mocks base method.
func (m *MockImageCache) GetCachedImagesFolder() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedImagesFolder")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCachedImagesFolder indicates an expected call of GetCachedImagesFolder.
func (mr *MockImageCacheMockRecorder) GetCachedImagesFolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedImagesFolder", reflect.TypeOf((*MockImageCache)(nil).GetCachedImagesFolder))
}

// Remember mocks base method.
func (m *MockImageCache) Remember(key string, callback func() (*core.Image, error)) (*core.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remember", key, callback)
	ret0, _ := ret[0].(*core.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remember indicates an expected call of Remember.
func (mr *MockImageCacheMockRecorder) Remember(key, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remember", reflect.TypeOf((*MockImageCache)(nil).Remember), key, callback)
}
